//= require jquery
//= require jquery_ujs
//= require jquery-ui
//= require_self
// require_tree .
//= require_tree ../../../vendor/assets/javascripts/.


$(document).ready(function(){
    Inventory.load();
});

var Inventory = function() {
    return {
        load : function() {
            var controller = window.location.pathname.match(/\w+/).toString();
            switch (controller) {
            case 'credit_purchases' :
            case 'cash_purchases' :
                purchase = new Purchase();
                purchase.initialize_associations();
                break;
            case 'credit_sales' :
            case 'cash_sales' :
                sale = new Sale();
                sale.initialize_associations();
                break;
            case 'cash_receipts' :
                cash_receipt = new CashReceipt();
                cash_receipt.initialize_associations();
                break;
            case 'purchase_payment_receipts' :
                payment_receipt = new PaymentReceipt();
                payment_receipt.initialize_associations();
                break;
            case 'expense_payment_receipts' :
                expense = new Expense();
                expense.initialize_associations();
                break;
            case 'sale_refunds' :
                sale_refund = new SaleRefund();
                sale_refund.initialize_associations();
                break;
            case 'purchase_refunds' :
                purchase_refund = new PurchaseRefund();
                purchase_refund.initialize_associations();
                break;
            case 'reports' :
                report = new Report();
                report.initialize();
                break;
            case 'products' :
                product = new Product();
                break;
            }
            autocomplete_city();
            autocomplete_employee();
            load_date_picker();

            jQuery('ul.sf-menu').superfish();
            //Size attr is not configurable using rails helpers
            $('.file_field').attr('size', 10);
            //Used in show views to make all input field readonly
            $("#readonly input, #readonly textarea").attr('readonly', 'readonly');
            customize_wice_grid();
            prevent_submit();
        }
    };
}();


  /*********************************************************/
  /************ OBJECTS FOR EACH MODEL**********************/
  /*********************************************************/

//These are the common attrs for a purchase invoice or sale invoice
function get_invoice_attrs(model_name) {
    var entry_date = $("#" + model_name + "_entry_date") || 0;
    var expiration_date = $("#" + model_name + "_expiration_date") || 0;
    var gross_value = $("#" + model_name + "_gross_value") || 0;
    var discount = $("#" + model_name + "_discount") || 0;
    var disc_pct = $("#" + model_name + "_disc_pct") || 0;
    var freight  = $("#" + model_name + "_freight") || 0;
    var vat = $("#" + model_name + "_vat") || 0;
    var withholding_source = $("#" + model_name + "_withholding_source") || 0;
    var total = $("#" + model_name + "_total") || 0;
    var refund_value = $("#" + model_name + "_refund_value") || 0;
    var paid_value = $("#" + model_name + "_paid_value") || 0;
    var balance = $("#" + model_name + "_balance") || 0;

    return {
        'entry_date' : entry_date,
        'expiration_date' : expiration_date,
        'gross_value' : gross_value,
        'discount' : discount,
        'disc_pct' : disc_pct,
        'freight' : freight,
        'vat' : vat,
        'withholding_source' : withholding_source,
        'total' : total,
        'refund_value' : refund_value,
        'paid_value' : paid_value,
        'balance' : balance
    };
}


/*********************************************************/
/***************** COMPUTE AMOUNTS ***********************/
/*********************************************************/

//These two functions act based on the value that the user type first.
//For example, if user types disc_pct it computes discount and
//viceversa.
function compute_discount(obj) {
    var discount =  obj.gross_value.asNumber() * (obj.disc_pct.asNumber() / 100);
    obj.discount.val(discount).formatCurrency();
}

function compute_disc_pct(obj) {
    var disc_pct = (obj.discount.asNumber() / obj.gross_value.asNumber()) * 100;
    obj.disc_pct.val(disc_pct.toFixed(2));
}

/*********************************************************/
/************ RECALCULATE FUNCTIONS**********************/
/*********************************************************/

//Everytime blur event is called, total_cost values are stored
//In their respective association object. So, When a line item is destroyed
//I have to delete that specefic key, If not that value will affect
//gross_value incrementing it
function recalculate_amounts(link, model_name){

    var input = $(link).parents().closest('.detail_fields').find("input:last").get(0);
    var id = match_digit(input);

    switch (model_name) {
    case 'cash_sale' :
    case 'credit_sale' :
        delete product_line_items.obj['key' + id];
        sale.compute_amounts();
        break;
    case 'cash_purchase' :
    case 'credit_purchase' :
        delete product_line_items.obj['key' + id];
        purchase.compute_amounts();
        break;
    case 'cash_receipt' :
        delete receipt_detail.obj['key' + id];
        cash_receipt.compute_amounts();
        break;
    case 'payment_receipt' :
        delete receipt_detail.obj['key' + id];
        payment_receipt.compute_amounts();
        break;
    case 'purchase_refund' :
        delete product_line_items.obj['key' + id];
        purchase_refund.compute_amounts();
        break;
    case 'sale_refund' :
        delete product_line_items.obj['key' + id];
        sale_refund.compute_amounts();
        break;
    case 'payment_method' :
        delete payment_method.obj['key' + id];
        payment_method.compute_amounts();
        break;
    }
}


function remove_fields(link) {
    $(link).prev("input[type=hidden]").val("1");
    $(link).parents().closest('.detail_fields').hide();
    var model_name = $(link).attr('rel');
    recalculate_amounts(link, model_name);
}


/*********************************************************/
/************ AUTOCOMPLETE FUNCTIONS**********************/
/*********************************************************/
function autocomplete_employee() {
    $(".employee").live('blur railsAutocomplete.select', function(event,data) {
        var model_name = get_model_name(this);
        if (typeof data !== 'undefined') {
            $("#" + model_name + "_employee_id").val(data.item.id);
        }
    });
}

function autocomplete_city() {
    $(".city").live('blur railsAutocomplete.select', function(event, data) {
        var model_name = get_model_name(this);
        if (typeof data !== 'undefined') {
            var display_value =  data.item.value.split('-');
            $("#" + model_name + "_city_id").val(data.item.id);
            $("#" + model_name + "_city_name").val(display_value[0]);
            $("#" + model_name + "_state_id").val(data.item.state_id);
            $("#" + model_name + "_state_name").val(display_value[1]);
        }
    });
}


/*********************************************************/
/************ MISCELLANEOUS FUNCTIONS ********************/
/*********************************************************/

function load_date_picker() {
    $(".date-picker").datepicker({
        showWeek : true,
        showOtherMonths :true,
        selectOtherMonths :true,
	changeMonth : true,
	changeYear : true,
        dateFormat :'yy-mm-dd'
    });
    $(".date-picker").live('change click', function() {
        $(".date-picker").datepicker("hide");
    });
}

//Add an instance of a new nested_model and set attributes's id to the current time
function add_fields(link, association, content) {
    var new_id = new Date().getTime();
    //Perform a global match (find all matches rather than stopping
    //after the first match)
    var regexp = new RegExp("new_" + association, "g");
    $(link).parent().before(content.replace(regexp, new_id));
}

//It extracts model name attributes that have names like
//credit_purchase[gross_value], cash_purchase[vat], etc.
function get_model_name(input) {
    var model_name =  input.name.substring(0, input.name.indexOf("["));
    return model_name;
}

//Usually the input's id name of a nested model is like
//credit_purchase_purchase_details_attributes_1312217305240_product_name
//What I do is split that name until it finds a number
//whichs is the only thing that changes when a new instance
//of a  nested model is created.
function get_partial_name(input) {
    var partial_name = $(input).attr('id').match(/\w+\d+/g);
    return partial_name;
}

function isEmpty(obj) {
    for(var prop in obj) {
        if(obj.hasOwnProperty(prop))
            return false;
    }
    return true;
}

//It gets input attribute name and extract the number
function match_digit(input) {
    return  $(input).attr('id').match(/\d+/);
}

function customize_wice_grid() {
    jQuery('ul.action-menu').superfish();
    relocate_table_containers();
    range_placeholders();
    $(".wice_grid").stickyTableHeaders();
    $("table tr:nth-child(even)").addClass("gris");
    $("#g1 .sf-sub-indicator").remove();
    $("#g1 tfoot").remove();
}

function get_table_cell_length(){
    $("td, th").live('click',function(){
        console.log($(this).width());
    });
}

function range_placeholders() {
    $(".range-start").attr('placeholder', 'Val. inicial');
    $(".range-end").attr('placeholder', 'Val. final');
}

function relocate_table_containers() {
    $(".pagination").first().appendTo("#upperPagCont");
    $(".pagination_status").first().appendTo("#upperPagCont");
    $(".pagination").last().appendTo("#lowerPagCont");
    $(".pagination_status").last().appendTo("#lowerPagCont");
    $(".filtros2").appendTo("#filterCont");
    $("#inv_act").removeClass('fright');
    $("#inv_act").addClass('fleft');
    $("#inv_act").appendTo(".menuCont");
}

//If there is a carriage return dont submit the form
function prevent_submit() {
    $('input').keydown( function(event) {
        if(event.keyCode == 13) {
            event.preventDefault();
            return false;
        }
    });
}

function current_date() {
    var today = new Date();
    var dd = today.getDate();
    var mm = today.getMonth() + 1; //January is 0!
    var yyyy = today.getFullYear();

    if(dd < 10) { dd = '0' + dd;}
    if(mm < 10) { mm = '0' + mm;}
    return yyyy + '-' + mm + '-' + dd;
}

function days_from_now(days) {
    var now = new Date();
    var next_month = new Date(now.getFullYear(), now.getMonth(), now.getDate() + days);
    var dd = next_month.getDate();
    var mm = next_month.getMonth() + 1; //January is 0!
    var yyyy = next_month.getFullYear();

    if(dd < 10) { dd = '0' + dd;}
    if(mm < 10) { mm = '0' + mm;}
    return yyyy + '-' + mm + '-' + dd;
}
